const axios = require('axios');

/**
 * Initializes the SMTP connection with a provider and API key
 * @param {string} baseUrl - The email service provider or custom base URL
 * @param {string} apiKey - The API key for authentication
 * @returns {Object} Object containing independent functions for specific use cases
 */
const InitializeSmtpConnection = (baseUrl, apiKey) => {
  /**
   * Sends OTP via email
   * @param {string} email - Recipient email address
   * @returns {Promise} API response
   */
  const sendOtpByEmail = async (email) => {
    try {
      const response = await axios.get(`${baseUrl}/send-otp?to=${email}&type=email`, {
        headers: {
          Authorization: `Bearer ${apiKey}`,
        },
      });

      console.log('OTP sent successfully via email:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error sending OTP via email:', error.response ? error.response.data : error.message);
      throw error;
    }
  };

  /**
   * Sends OTP via SMS
   * @param {string} phoneNumber - Recipient phone number
   * @returns {Promise} API response
   */
  const sendOtpBySms = async (phoneNumber) => {
    try {
      const response = await axios.get(`${baseUrl}/send-otp?to=${phoneNumber}&type=sms`, {
        headers: {
          Authorization: `Bearer ${apiKey}`,
        },
      });

      console.log('OTP sent successfully via SMS:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error sending OTP via SMS:', error.response ? error.response.data : error.message);
      throw error;
    }
  };

  /**
   * Verifies OTP for the specified email or phone number
   * @param {string} to - Recipient email address or phone number
   * @param {string} otp - The OTP to verify
   * @returns {Promise} API response
   */
  const verifyOtp = async (to, otp) => {
    try {
      const response = await axios.get(`${baseUrl}/verify-otp?to=${to}&otp=${otp}`, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${apiKey}`,
        },
      });

      console.log('OTP verified successfully:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error verifying OTP:', error.response ? error.response.data : error.message);
      throw error;
    }
  };

  /**
   * Sends custom email
   * @param {string} email - Recipient email address
   * @param {string} subject - Email subject
   * @param {string} body - Email body
   * @returns {Promise} API response
   */
  const sendCustomMessageByEmail = async (email, subject, body) => {
    try {
      const response = await axios.get(`${baseUrl}/send-custom-mail?to=${email}&type=email&subject=${subject}&body=${body}`, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${apiKey}`,
        },
      });

      console.log('Custom email sent successfully:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error sending custom email:', error.response ? error.response.data : error.message);
      throw error;
    }
  };

  /**
   * Sends custom SMS
   * @param {string} phoneNumber - Recipient phone number
   * @param {string} body - SMS body
   * @returns {Promise} API response
   */
  const sendCustomMessageBySms = async (phoneNumber, body) => {
    try {
      const response = await axios.get(`${baseUrl}/send-custom-mail?to=${phoneNumber}&type=sms&body=${body}`, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${apiKey}`,
        },
      });

      console.log('Custom SMS sent successfully:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error sending custom SMS:', error.response ? error.response.data : error.message);
      throw error;
    }
  };

  return {
    sendOtpByEmail,
    sendOtpBySms,
    verifyOtp,
    sendCustomMessageByEmail,
    sendCustomMessageBySms,
  };
};

module.exports = InitializeSmtpConnection;
module.exports.default = InitializeSmtpConnection;